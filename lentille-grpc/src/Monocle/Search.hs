{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Search where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
newtype GetSuggestionsRequest = GetSuggestionsRequest{getSuggestionsRequestIndex
                                                      :: Hs.Text}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetSuggestionsRequest where
        nameOf _ = (Hs.fromString "GetSuggestionsRequest")
 
instance HsProtobuf.HasDefault GetSuggestionsRequest
 
instance HsProtobuf.Message GetSuggestionsRequest where
        encodeMessage _
          GetSuggestionsRequest{getSuggestionsRequestIndex =
                                  getSuggestionsRequestIndex}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getSuggestionsRequestIndex)])
        decodeMessage _
          = (Hs.pure GetSuggestionsRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "index")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetSuggestionsRequest where
        toJSONPB (GetSuggestionsRequest f1)
          = (HsJSONPB.object ["index" .= f1])
        toEncodingPB (GetSuggestionsRequest f1)
          = (HsJSONPB.pairs ["index" .= f1])
 
instance HsJSONPB.FromJSONPB GetSuggestionsRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetSuggestionsRequest"
               (\ obj -> (Hs.pure GetSuggestionsRequest) <*> obj .: "index"))
 
instance HsJSONPB.ToJSON GetSuggestionsRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetSuggestionsRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetSuggestionsRequest where
        declareNamedSchema _
          = do let declare_index = HsJSONPB.declareSchemaRef
               getSuggestionsRequestIndex <- declare_index Proxy.Proxy
               let _ = Hs.pure GetSuggestionsRequest <*>
                         HsJSONPB.asProxy declare_index
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetSuggestionsRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("index", getSuggestionsRequestIndex)]}})
 
newtype GetSuggestionsResponse = GetSuggestionsResponse{getSuggestionsResponseTaskTypes
                                                        :: Hs.Vector Hs.Text}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetSuggestionsResponse where
        nameOf _ = (Hs.fromString "GetSuggestionsResponse")
 
instance HsProtobuf.HasDefault GetSuggestionsResponse
 
instance HsProtobuf.Message GetSuggestionsResponse where
        encodeMessage _
          GetSuggestionsResponse{getSuggestionsResponseTaskTypes =
                                   getSuggestionsResponseTaskTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      getSuggestionsResponseTaskTypes))])
        decodeMessage _
          = (Hs.pure GetSuggestionsResponse) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "task_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetSuggestionsResponse where
        toJSONPB (GetSuggestionsResponse f1)
          = (HsJSONPB.object ["task_types" .= f1])
        toEncodingPB (GetSuggestionsResponse f1)
          = (HsJSONPB.pairs ["task_types" .= f1])
 
instance HsJSONPB.FromJSONPB GetSuggestionsResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetSuggestionsResponse"
               (\ obj ->
                  (Hs.pure GetSuggestionsResponse) <*> obj .: "task_types"))
 
instance HsJSONPB.ToJSON GetSuggestionsResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetSuggestionsResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetSuggestionsResponse where
        declareNamedSchema _
          = do let declare_task_types = HsJSONPB.declareSchemaRef
               getSuggestionsResponseTaskTypes <- declare_task_types Proxy.Proxy
               let _ = Hs.pure GetSuggestionsResponse <*>
                         HsJSONPB.asProxy declare_task_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetSuggestionsResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("task_types",
                                                         getSuggestionsResponseTaskTypes)]}})
 
data Search request response = Search{searchGetSuggestions ::
                                      request 'HsGRPC.Normal Monocle.Search.GetSuggestionsRequest
                                        Monocle.Search.GetSuggestionsResponse
                                        ->
                                        Hs.IO
                                          (response 'HsGRPC.Normal
                                             Monocle.Search.GetSuggestionsResponse)}
                             deriving Hs.Generic
 
searchServer ::
               Search HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                 HsGRPC.ServiceOptions -> Hs.IO ()
searchServer Search{searchGetSuggestions = searchGetSuggestions}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/monocle.search.v1.Search/GetSuggestions")
                                   (HsGRPC.convertGeneratedServerHandler searchGetSuggestions))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength})
 
searchClient ::
               HsGRPC.Client ->
                 Hs.IO (Search HsGRPC.ClientRequest HsGRPC.ClientResult)
searchClient client
  = (Hs.pure Search) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/monocle.search.v1.Search/GetSuggestions")))